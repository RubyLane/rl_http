package require Tcl 8.6

if {"::tcltest" ni [namespace children]} {
	package require tcltest
	namespace import ::tcltest::*
}

source tests/common.tcl

test tapchan-1.1 {Inspect bytes on the wire with -tapchan} -setup { #<<<
	package require aio
	set fakeserver	[socket -server [list coroutine coro_tapchan-1.1 apply {{chan peer_ip peer_port} {
		global socks
		lappend socks $chan
		chan configure $chan -translation {auto crlf} -blocking 0 -buffering full -buffersize 65536 -encoding ascii
		while {[aio gets $chan 1] ne ""} {}
		set line	[gets $chan]
		if {![chan blocked $chan]} {
			set body	[encoding convertto utf-8 "Extra garbage after HTTP request: $line"]
			puts $chan "HTTP/1.1 400 Bad"
		} else {
			set body	[encoding convertto utf-8 "hello, tapchan"]
			puts $chan "HTTP/1.1 200 OK"
		}
		puts $chan "Content-Type: text/plain; charset=utf-8"
		puts $chan "Content-Length: [string length $body]"
		puts $chan "Server: fake test server"
		puts $chan "Date: Tue, 16 Aug 2022 08:11:55 GMT"
		puts $chan "Connection: close"
		puts $chan ""
		chan configure $chan -translation binary
		puts -nonewline $chan $body
		flush $chan
		close $chan
	}}] 0]
	lappend socks	$fakeserver
	set port	[lindex [chan configure $fakeserver -sockname] 2]
} -body {
	rl_http instvar h GET http://localhost:$port/foo -timeout 5 -tapchan rl_http::tapchan
	list [$h code] [$h body]
} -cleanup {
	if {[info exists socks]} {
		foreach sock $socks {
			if {$sock ni [chan names]} continue
			try {close $sock} on error {errmsg options} {
				puts stderr "Error closing sock $sock ([dict get $options -errorcode]): $errmsg"
			}
		}
	}
	unset -nocomplain fakeserver port socks sock h
	catch {rename coro_tapchan-1.1 {}}
} -result {200 {hello, tapchan}} -match regexp -errorOutput {rl_http tapchan [^ ]+ initialize read write
rl_http tapchan [^ ]+ write (?:[A-Za-z0-9+/-]+={0,2})
rl_http tapchan [^ ]+ read SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLTgNCkNvbnRlbnQtTGVuZ3RoOiAxNA0KU2VydmVyOiBmYWtlIHRlc3Qgc2VydmVyDQpEYXRlOiBUdWUsIDE2IEF1ZyAyMDIyIDA4OjExOjU1IEdNVA0KQ29ubmVjdGlvbjogY2xvc2UNCg0KaGVsbG8sIHRhcGNoYW4=
tapchan [^ ]+ finalize
$}
#>>>

::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
