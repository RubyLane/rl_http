package require Tcl 8.6

if {"::tcltest" ni [namespace children]} {
	package require tcltest
	namespace import ::tcltest::*
}

set here	[file dirname [file normalize [info script]]]
source [file join $here common.tcl]
package require gc_class

gc_class create uds_server {
	variable {*}{
		tid
	}

	constructor testname { #<<<
		package require thread
		if {[self next] ne ""} next

		set tid	[thread::create -preserved]
		thread::send $tid [string map [list \
			%testname%	[list $testname] \
		] {
			package require unix_sockets
			set sockname	/tmp/rl_http_%testname%-[pid].sock
			set listen	[unix_sockets::listen $sockname [list apply {{sock args} {
				puts stderr "Accepting uds connection $sock: $args"
				chan configure $sock -blocking 0 -translation {auto lf} -encoding binary
				read $sock
				puts -nonewline $sock "HTTP/1.1 200 Ok\nContent-Length: 2\nContent-Type: text/plain\nServer: Test\nDate: [clock format [clock seconds] -format "%a, %d %b %Y %T GMT" -timezone :UTC]\n\nok"
				close $sock
			}}]]

			proc cleanup {} {
				global sockname listen
				if {[info exists listen] && $listen in [chan names]} {
					close $listen
				}
				file delete $sockname
			}
		}]
	}

	#>>>
	destructor { #<<<
		if {[info exists tid]} {
			thread::send $tid cleanup
			thread::release $tid
			unset tid
		}
		if {[self next] ne ""} next
	}

	#>>>
	method sockname {} { thread::send $tid {set sockname} }
}

test rl_http-1.1 {Basic usage, GET, http://} -body { #<<<
	rl_http create h GET http://image0-rubylane.s3.amazonaws.com/0/cart/introbg.gif -timeout 5
	list [h code] [md5::md5 -hex [h body]]
} -cleanup {
	if {[info object isa object h]} {h destroy}
} -result {200 E9EE03953F2D261E6329D921D7DDA0A3}
#>>>
test rl_http-1.2 {Basic usage, GET, https://} -body { #<<<
	rl_http create h GET https://image0-rubylane.s3.amazonaws.com/0/cart/introbg.gif -timeout 5
	list [h code] [md5::md5 -hex [h body]]
} -cleanup {
	if {[info object isa object h]} {h destroy}
} -result {200 E9EE03953F2D261E6329D921D7DDA0A3}
#>>>
test rl_http-2.1 {local sockets, reuri} -setup { #<<<
	if {[info exists ::rl_http::have_reuri]} {set old_have_reuri $::rl_http::have_reuri} else {unset -nocomplain old_have_reuri}
	package require reuri 0.2.5
	set ::rl_http::have_reuri 1
	uds_server instvar s rl_http-2.1
} -body {
	rl_http instvar h GET "http://\[[$s sockname]\]/foo"
	list [$h code] [$h body]
} -cleanup {
	if {[info exists old_have_reuri]} {set ::rl_http::have_reuri $old_have_reuri} else {unset -nocomplain ::rl_http:have_reuri}
	unset -nocomplain h old_have_reuri s
} -result {200 ok}
#>>>
test rl_http-2.2 {local sockets, ip_future version scope, reuri} -setup { #<<<
	if {[info exists ::rl_http::have_reuri]} {set old_have_reuri $::rl_http::have_reuri} else {unset -nocomplain old_have_reuri}
	package require reuri 0.2.5
	uds_server instvar s rl_http-2.2
} -body {
	rl_http instvar h GET "http://\[v0.local:[$s sockname]\]/foo"
	list [$h code] [$h body]
} -cleanup {
	if {[info exists old_have_reuri]} {set ::rl_http::have_reuri $old_have_reuri} else {unset -nocomplain ::rl_http:have_reuri}
	unset -nocomplain h old_have_reuri s
} -result {200 ok}
#>>>
test rl_http-3.1 {local sockets, no reuri} -setup { #<<<
	if {[info exists ::rl_http::have_reuri]} {set old_have_reuri $::rl_http::have_reuri} else {unset -nocomplain old_have_reuri}
	set ::rl_http::have_reuri 0
	uds_server instvar s rl_http-3.1
} -body {
	rl_http instvar h GET "http://\[[$s sockname]\]/foo"
	list [$h code] [$h body]
} -cleanup {
	if {[info exists old_have_reuri]} {set ::rl_http::have_reuri $old_have_reuri} else {unset -nocomplain ::rl_http:have_reuri}
	unset -nocomplain h old_have_reuri s
} -result {200 ok}
#>>>
test rl_http-3.2 {local sockets, ip_future version scope, reuri} -setup { #<<<
	if {[info exists ::rl_http::have_reuri]} {set old_have_reuri $::rl_http::have_reuri} else {unset -nocomplain old_have_reuri}
	uds_server instvar s rl_http-3.2
} -body {
	rl_http instvar h GET "http://\[v0.local:[$s sockname]\]/foo"
	list [$h code] [$h body]
} -cleanup {
	if {[info exists old_have_reuri]} {set ::rl_http::have_reuri $old_have_reuri} else {unset -nocomplain ::rl_http:have_reuri}
	unset -nocomplain h old_have_reuri s
} -result {200 ok}
#>>>

::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
